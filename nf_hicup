#!/usr/bin/env nextflow
nextflow.enable.dsl=2

// last modified 11 May 2021

params.outdir = "."
params.genome = ""
params.enzyme = ""
params.hicup_args = ''
params.verbose = false
params.single_end = false  // default mode is auto-detect. NOTE: params are handed over automatically 

params.list_genomes = false;

params.help = false
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

if (params.list_genomes){
    println ("[WORKLFOW] List genomes selected")
}

if (params.verbose){
    println ("[WORKFLOW] HICUP ARGS: "      + params.hicup_args)
}

include { makeFilesChannel; getFileBaseNames }     from './nf_modules/files.mod.nf'
include { getGenome }                              from './nf_modules/genomes.mod.nf'
include { listGenomes }                            from './nf_modules/genomes.mod.nf'

if (params.list_genomes){
    listGenomes()  // this lists all available genomes, and exits
}

genome = getGenome(params.genome)
include {HICUP } from './nf_modules/hicup.mod.nf'   params(genome: genome)

file_ch = makeFilesChannel(args)

workflow {

    main:
        HICUP(file_ch, params.outdir, params.hicup_args, params.verbose, params.enzyme)  
}

// Since workflows with very long command lines tend to fail to get rendered at all, I was experimenting with a
// minimal execution summary report so we at least know what the working directory was...
workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@mrc-lmb.cam.ac.uk", subject: 'Minimal pipeline execution report', body: msg)
}

def helpMessage() {
 
    log.info"""
    >>

    This workflow takes in a list of paired filenames (in FastQ format) and processes them with HiCUP.

    USAGE:
    
    nf_hicup [options] --genome <genomeID> --digest <digestID> <input files>
    
    Mandatory arguments:
    ====================

      <input files>                   List of input files, e.g. '*fastq.gz' or '*fq.gz'. These will be from a paired-end run.

      --genome [str]                  Genome build ID to be used for the alignment, e.g. GRCh38 (latest human genome) or GRCm38
                                      (latest mouse genome build). To list all available genomes, see '--list_genomes' below.
      
      --digest [str]                  Restriction enzyme used to create Hi-C junctions.
    

    Tool-Specific Options:
    ======================

    Other Options:
    ==============

      --outdir [str]                  Path to the output directory. [Default: current working directory]

      --list_genomes                  List all genome builds that are currently available to choose from. To see this list
                                      of available genomes with more detailed information about paths and indexes, run
                                      the command as '--list_genomes --verbose'
      
      --verbose                       More verbose status messages. [Default: OFF]
      --help                          Displays this help message and exits.

    Workflow Options:
    =================

    Please note the single '-' hyphen for the following options!

      -resume                         If a pipeline workflow has been interrupted or stopped (e.g. by accidentally closing a laptop),
                                      this option will attempt to resume the workflow at the point it got interrupted by using
                                      Nextflow's caching mechanism. This may save a lot of time.

      -bg                             Sends the entire workflow into the background, thus disconnecting it from the terminal session.
                                      This option launches a daemon process (which will keep running on the headnode) that watches over
                                      your workflow, and submits new jobs to the SLURM queue as required. Use this option for big pipeline
                                      jobs, or whenever you do not want to watch the status progress yourself. Upon completion, the
                                      pipeline will send you an email with the job details. This option is HIGHLY RECOMMENDED!
    <<
    """.stripIndent()

}

